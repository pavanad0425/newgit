AWSTemplateFormatVersion: '2010-09-09'
Description: Simple ECS Cluster with NLB, ALB, and Backend Database (Private Subnets)

Parameters:
  VpcCIDR:
    Type: String
    Default: "10.0.0.0/16"
    Description: CIDR block for the VPC
  BackendSubnetCIDR:
    Type: String
    Default: "10.0.1.0/24"
    Description: CIDR block for the backend subnet
  ApplicationSubnetCIDR:
    Type: String
    Default: "10.0.2.0/24"
    Description: CIDR block for the application subnet
  DataSubnetCIDR:
    Type: String
    Default: "10.0.3.0/24"
    Description: CIDR block for the data subnet
  DBUsername:
    Type: String
    Default: "admin"
    Description: Username for the database
  DBPassword:
    Type: String
    NoEcho: true
    Description: Password for the database

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR

  BackendSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref BackendSubnetCIDR
      AvailabilityZone: !Select [0, !GetAZs ""]

  ApplicationSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref ApplicationSubnetCIDR
      AvailabilityZone: !Select [1, !GetAZs ""]

  DataSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref DataSubnetCIDR
      AvailabilityZone: !Select [2, !GetAZs ""]

  NLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Subnets: 
        - !Ref BackendSubnet
      Type: network

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Subnets:
        - !Ref BackendSubnet
      Type: application

  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t2.micro
      Engine: mysql
      EngineVersion: "5.7"
      DBName: ContactsDB
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: 10
      StorageType: gp2
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VPCSecurityGroups:
        - !GetAtt DatabaseSecurityGroup.GroupId

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnets for the database"
      SubnetIds:
        - !Ref DataSubnet

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for the database"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !Ref VpcCIDR

Outputs:
  NLBEndpoint:
    Description: "Endpoint for the Network Load Balancer"
    Value: !GetAtt NLB.DNSName

  ALBEndpoint:
    Description: "Endpoint for the Application Load Balancer"
    Value: !GetAtt ALB.DNSName

  DatabaseEndpoint:
    Description: "Endpoint for the Database"
    Value: !GetAtt Database.Endpoint.Address
